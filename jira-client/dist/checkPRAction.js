"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(e,t,i,s){void 0===s&&(s=i),Object.defineProperty(e,s,{enumerable:!0,get:function(){return t[i]}})}:function(e,t,i,s){void 0===s&&(s=i),e[s]=t[i]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),__importStar=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&__createBinding(t,e,i);return __setModuleDefault(t,e),t},__awaiter=this&&this.__awaiter||function(e,t,i,s){return new(i||(i=Promise))((function(o,n){function r(e){try{a(s.next(e))}catch(e){n(e)}}function l(e){try{a(s.throw(e))}catch(e){n(e)}}function a(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(r,l)}a((s=s.apply(e,t||[])).next())}))};Object.defineProperty(exports,"__esModule",{value:!0});const core=__importStar(require("@actions/core")),github=__importStar(require("@actions/github")),JiraClient_1=require("./JiraClient"),main=()=>__awaiter(void 0,void 0,void 0,(function*(){var e,t,i;try{const s=process.env.JIRAEMAIL,o=process.env.JIRATOKEN;if(!s)return void core.setFailed("Missing JIRAEMAIL env variable. Use env: JIRAEMAIL: ${{ secrets.MY_JIRA_MAIL_SECRET }}");if(!o)return void core.setFailed("Missing JIRATOKEN env variable. Use env: JIRATOKEN: ${{ secrets.MY_JIRATOKEN_SECRET }}");const n=core.getInput("bypass-prefix",{required:!1}),r=core.getInput("host",{required:!0}),l=core.getInput("project-key",{required:!0});let a=new JiraClient_1.JiraClient({host:r,email:s,apiToken:o,projectKey:l});const u=(null===(i=null===(t=null===(e=null==github?void 0:github.context)||void 0===e?void 0:e.payload)||void 0===t?void 0:t.pull_request)||void 0===i?void 0:i.title)||"";if(console.log(`*** Checking pull request title: ${u}`),n&&u.startsWith(n))return void console.log(`PR title starts with ${n} bypassing existing JIRA issue test`);const c=yield a.checkTextForExistingJiras(u);0==c.length?n?core.setFailed(`Pull-request title does not mention an existing JIRA issue in the project ${l}. Please correct this by prefixing the title with a JIRA issue key i.e. ${l}-1234. If there is no JIRA needed for this PR you are allowed to bypass this test by prefixing the title with ${n}`):core.setFailed(`Pull-request title does not mention an existing JIRA issue in the project ${l}. Please correct this by prefixing the title with a JIRA issue key i.e. ${l}-1234. This Jira issue needs to exist on the project ${l}. You can set the bypass-prefix input on this action to a string that allows bypassing of this test if set as a prefix to the title of the pull-request.`):(console.log("Found"),console.log(c))}catch(e){console.log(e)}}));__awaiter(void 0,void 0,void 0,(function*(){var e,t,i;try{const s=process.env.JIRAEMAIL,o=process.env.JIRATOKEN;if(!s)return void core.setFailed("Missing JIRAEMAIL env variable. Use env: JIRAEMAIL: ${{ secrets.MY_JIRA_MAIL_SECRET }}");if(!o)return void core.setFailed("Missing JIRATOKEN env variable. Use env: JIRATOKEN: ${{ secrets.MY_JIRATOKEN_SECRET }}");const n=core.getInput("bypass-prefix",{required:!1}),r=core.getInput("host",{required:!0}),l=core.getInput("project-key",{required:!0});let a=new JiraClient_1.JiraClient({host:r,email:s,apiToken:o,projectKey:l});const u=(null===(i=null===(t=null===(e=null==github?void 0:github.context)||void 0===e?void 0:e.payload)||void 0===t?void 0:t.pull_request)||void 0===i?void 0:i.title)||"";if(console.log(`*** Checking pull request title: ${u}`),n&&u.startsWith(n))return void console.log(`PR title starts with ${n} bypassing existing JIRA issue test`);const c=yield a.checkTextForExistingJiras(u);0==c.length?n?core.setFailed(`Pull-request title does not mention an existing JIRA issue in the project ${l}. Please correct this by prefixing the title with a JIRA issue key i.e. ${l}-1234. If there is no JIRA needed for this PR you are allowed to bypass this test by prefixing the title with ${n}`):core.setFailed(`Pull-request title does not mention an existing JIRA issue in the project ${l}. Please correct this by prefixing the title with a JIRA issue key i.e. ${l}-1234. This Jira issue needs to exist on the project ${l}. You can set the bypass-prefix input on this action to a string that allows bypassing of this test if set as a prefix to the title of the pull-request.`):(console.log("Found"),console.log(c))}catch(e){console.log(e)}}));