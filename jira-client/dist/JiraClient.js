"use strict";var __awaiter=this&&this.__awaiter||function(t,e,i,r){return new(i||(i=Promise))((function(s,o){function n(t){try{c(r.next(t))}catch(t){o(t)}}function a(t){try{c(r.throw(t))}catch(t){o(t)}}function c(t){var e;t.done?s(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(n,a)}c((r=r.apply(t,e||[])).next())}))},__importDefault=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.Formatting=exports.JiraClient=void 0;const axios_1=require("axios"),JiraIssueParser_1=__importDefault(require("./JiraIssueParser"));class NotFoundError extends Error{constructor(){super("Not found")}}class Formatting{pad(t){return`${t}`.padStart(2,"0")}getTodaysDate(){return this.formatDate(new Date)}formatDate(t){return`${t.getFullYear()}-${this.pad(t.getMonth()+1)}-${this.pad(t.getDate())}`}}exports.Formatting=Formatting;class JiraClient{constructor(t){this.cachedProject=null,this.host=t.host,this.email=t.email,this.project=t.projectKey,this.logParser=new JiraIssueParser_1.default(t.projectKey);const e=Buffer.from(`${this.email}:${t.apiToken}`).toString("base64");this.http=new axios_1.Axios({transformResponse:[function(t,e){if(t)try{return JSON.parse(t)}catch(t){console.log("Error parsing response data",t)}}],headers:{authorization:`Basic ${e}`,accept:"application/json","content-type":"application/json"}})}get baseUrl(){return`https://${this.host}/rest/api/3`}makeUrl(t){return`${this.baseUrl}${t}`}createOrUpdateJiraRelease(t){return __awaiter(this,void 0,void 0,(function*(){let e=this.logParser.parseIssuesKeysFromLog(t.changelog);console.log(`Will add fix version ${t.name} to these issues ${e}`);try{yield this.addFixVersionToIssues(t,e)}catch(t){console.error(t)}}))}checkTextForExistingJiras(t){return __awaiter(this,void 0,void 0,(function*(){const e=t.split(/\,/),i=this.logParser.parseIssuesKeysFromLog(e);let r=[];for(const t in i){const e=i[t];try{const t=yield this.getIssue(e);r.push(t)}catch(t){}}return r.map((t=>{var e,i,r;return{id:t.id,key:t.key,statusName:null===(i=null===(e=t.fields)||void 0===e?void 0:e.status)||void 0===i?void 0:i.name,summary:null===(r=t.fields)||void 0===r?void 0:r.summary}}))}))}getIssue(t){return __awaiter(this,void 0,void 0,(function*(){const e=`/issue/${t}`,i=yield this.http.get(this.makeUrl(e));return this.validateResponse(i),i.data}))}validateResponse(t){if(t.status<200||t.status>299)switch(t.status){case 404:throw new NotFoundError;default:throw new Error("Invalid status code")}}getVersions(){return __awaiter(this,void 0,void 0,(function*(){const t=`/project/${this.project}/versions`,e=yield this.http.get(this.makeUrl(t));return this.validateResponse(e),e.data}))}getUnreleasedVersions(){return __awaiter(this,void 0,void 0,(function*(){return(yield this.getVersions()).filter((t=>0==t.released))}))}getUnreleasedVersion(t){return __awaiter(this,void 0,void 0,(function*(){var e=(yield this.getUnreleasedVersions()).filter((e=>e.name==t));return 0==e.length?null:e[0]}))}getProject(){return __awaiter(this,void 0,void 0,(function*(){if(this.cachedProject)return this.cachedProject;const t=`/project/${this.project}`,e=yield this.http.get(this.makeUrl(t));return this.validateResponse(e),this.cachedProject=e.data,this.cachedProject}))}createFixVersion(t){return __awaiter(this,void 0,void 0,(function*(){console.log("Will create version "+t.name);const e=yield this.getProject();if(!e)return null;let i=this.makeUrl("/version");const r={archived:!1,releaseDate:(new Formatting).getTodaysDate(),name:t.name,description:t.description,projectId:e.id,released:!1},s=yield this.http.post(i,JSON.stringify(r));return this.validateResponse(s),s.data}))}addFixVersionToIssues(t,e){return __awaiter(this,void 0,void 0,(function*(){for(const i in e){const r=e[i];yield this.addFixVersion(t,r)}}))}addFixVersion(t,e){return __awaiter(this,void 0,void 0,(function*(){const i=`/issue/${e}`;let r=this.makeUrl(i),s=yield this.getUnreleasedVersion(t.name);if(!s&&(console.log("No such version, create it ..."),s=yield this.createFixVersion(t),!s))return!1;const o={update:{fixVersions:[{add:{id:s.id}}]}};try{const t=yield this.http.put(r,JSON.stringify(o));return this.validateResponse(t),!0}catch(t){return t instanceof NotFoundError?console.log(`WARNING: Non existing referenced JIRA ${e}`):console.log(t),!1}}))}}exports.JiraClient=JiraClient;